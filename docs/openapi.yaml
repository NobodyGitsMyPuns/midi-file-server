openapi: 3.0.0
info:
  title: ESP32 MIDI WiFi Server API
  description: API for uploading, listing, downloading, and deleting MIDI files on an ESP32.
  version: 1.0.0
servers:
  - url: http://{ESP32_IP}
    description: Local ESP32 Server
    variables:
      ESP32_IP:
        default: 192.168.1.43
        description: The IP address of your ESP32

paths:
  /files:
    get:
      summary: List all files
      description: Retrieve a list of all files stored on the ESP32, including available memory.
      responses:
        '200':
          description: A list of files and available memory.
          content:
            text/plain:
              schema:
                type: string
              example: |
                File1.mid
                File2.mid
                Free Memory: 100MB
        '500':
          description: Failed to retrieve the file list.
          content:
            text/plain:
              schema:
                type: string
              example: Internal Server Error.

  /upload:
    post:
      summary: Upload a MIDI file
      description: Upload a MIDI file to the ESP32.
      parameters:
        - in: query
          name: filename
          schema:
            type: string
          required: true
          description: The name of the file to be uploaded.
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: File uploaded successfully.
          content:
            text/plain:
              schema:
                type: string
              example: File uploaded successfully.
        '507':
          description: Insufficient storage to upload the file.
          content:
            text/plain:
              schema:
                type: string
              example: Insufficient storage.
        '500':
          description: Internal server error during upload.
          content:
            text/plain:
              schema:
                type: string
              example: Failed to upload the file.

  /download:
    get:
      summary: Download a MIDI file
      description: Download a MIDI file from the ESP32.
      parameters:
        - in: query
          name: filename
          schema:
            type: string
          required: true
          description: The name of the file to be downloaded.
      responses:
        '200':
          description: File downloaded successfully.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found.
          content:
            text/plain:
              schema:
                type: string
              example: File not found.
        '500':
          description: Internal server error during download.
          content:
            text/plain:
              schema:
                type: string
              example: Failed to download the file.

  /delete:
    delete:
      summary: Delete a MIDI file
      description: Delete a MIDI file from the ESP32.
      parameters:
        - in: query
          name: filename
          schema:
            type: string
          required: true
          description: The name of the file to be deleted.
      responses:
        '200':
          description: File deleted successfully.
          content:
            text/plain:
              schema:
                type: string
              example: File deleted successfully.
        '404':
          description: File not found.
          content:
            text/plain:
              schema:
                type: string
              example: File not found.
        '500':
          description: Internal server error during deletion.
          content:
            text/plain:
              schema:
                type: string
              example: Failed to delete the file.

  /v1/health:
    post:
      summary: Health check
      description: Checks if the server is running properly.
      responses:
        '200':
          description: Health check passed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  health:
                    type: string
                    example: OK
        '500':
          description: Internal server error during health check.
          content:
            text/plain:
              schema:
                type: string
              example: Internal Server Error.

  /v1/register:
    post:
      summary: Register a new user
      description: Register a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                otp:
                  type: string
                serialNumber:
                  type: string
              example:
                username: testuser
                password: testpassword
                otp: valid_otp
                serialNumber: valid_serial
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
        '409':
          description: Username already taken.
          content:
            text/plain:
              schema:
                type: string
              example: Username already taken.
        '500':
          description: Internal server error during registration.
          content:
            text/plain:
              schema:
                type: string
              example: Failed to register user.

  /v1/login:
    post:
      summary: Login an existing user
      description: Log in an existing user with the username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: testuser
                password: testpassword
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful.
        '401':
          description: Invalid credentials.
          content:
            text/plain:
              schema:
                type: string
              example: Invalid credentials.
        '500':
          description: Internal server error during login.
          content:
            text/plain:
              schema:
                type: string
              example: Failed to login user.

  /v1/get-signed-url:
    post:
      summary: Get signed URLs for MIDI files
      description: Get signed URLs for one or more MIDI files.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                objectName:
                  type: array
                  items:
                    type: string
              example:
                objectName:
                  - midi/Requiem_for_a_dream_mansell.mid
                  - midi/hans-zimmer-cornfield-chase.mid
      responses:
        '200':
          description: Signed URLs generated successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    signedURL:
                      type: string
                    objectName:
                      type: string
              example:
                - signedURL: "https://storage.googleapis.com/midi/Requiem_for_a_dream_mansell.mid?..."
                  objectName: "midi/Requiem_for_a_dream_mansell.mid"
                - signedURL: "https://storage.googleapis.com/midi/hans-zimmer-cornfield-chase.mid?..."
                  objectName: "midi/hans-zimmer-cornfield-chase.mid"
        '400':
          description: Invalid download request.
          content:
            text/plain:
              schema:
                type: string
              example: Invalid download request.
        '500':
          description: Internal server error during URL generation.
          content:
            text/plain:
              schema:
                type: string
              example: Failed to generate signed URL.
